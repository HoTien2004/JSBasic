Mảng trong JavaScript

1. Tạo Mảng 
    - Cách tạo
    - Sử dụng cách nào? Tại sao?
    - Kiểm tra data type?
2. Truy xuất mảng   
    - Độ dài mảng
    - Lấy phần tử theo index

* Làm việc với Array

1. To string
2. Join
3. Pop      : Xoá phần tử cuối mảng
4. Push     : Thêm phần tử vào cuối mảng
5. Shift    : Xoá phần tử đầu mảng
6. Unshift  : Thêm phần tử vào đầu bảng
7. Splicing : Xoá phần tử bất kì và trả về kết quả (có thể xoá và thêm phần tử mới vào)
    console.log(languages.splice(2, 2, 'Dart'));
8. Concat   : Nối 2 array
    console.log(languages.concat(languages2));
9. Slicing  : Cắt 1 vài hoặc toàn bộ element của Array
    console.log(languages.slice(1,3));

* Ví dụ khác 

var array = ['a', 'b', 'c', 'a', 'b', 'c']

console.log([...(new Set(array))]) // spread

* Array methods

----------------------------------------------------
forEacch()

var courses = [
    {
        id: 1,
        name: 'Javascript',
        coin: 250
    },
    {
        id: 2,
        name: 'PHP',
        coin: 0
    },
    {
        id: 3,
        name: 'Ruby',
        coin: 0
    },
    {
        id: 4,
        name: 'ReactJS',
        coin: 450
    }
]

courses.forEach(function (course,index) {
    console.log(index, course)
})
----------------------------------------------------



----------------------------------------------------
every()

var courses = [
    {
        id: 1,
        name: 'Javascript',
        coin: 250
    },
    {
        id: 2,
        name: 'PHP',
        coin: 0
    },
    {
        id: 3,
        name: 'Ruby',
        coin: 0
    },
    {
        id: 4,
        name: 'ReactJS',
        coin: 450
    }
]

var isFree = courses.every(function (course,index) {
    return course.coin === 0;
})

console.log(isFree);
----------------------------------------------------



----------------------------------------------------
some()

var courses = [
    {
        id: 1,
        name: 'Javascript',
        coin: 250
    },
    {
        id: 2,
        name: 'PHP',
        coin: 0
    },
    {
        id: 3,
        name: 'Ruby',
        coin: 0
    },
    {
        id: 4,
        name: 'ReactJS',
        coin: 450
    }
]

var isFree = courses.some(function (course,index) {
    return course.coin === 0;
})

console.log(isFree);
----------------------------------------------------



----------------------------------------------------
find()

var courses = [
    {
        id: 1,
        name: 'Javascript',
        coin: 250
    },
    {
        id: 2,
        name: 'PHP',
        coin: 0
    },
    {
        id: 3,
        name: 'Ruby',
        coin: 0
    },
    {
        id: 4,
        name: 'ReactJS',
        coin: 450
    }
]

var course = courses.find(function (course,index) {
    return course.name === 'Ruby';
})

console.log(course);

* Chỉ trả về 1 đối tượng nếu có trùng (trả về ông gần nhất)
----------------------------------------------------



----------------------------------------------------
filter()

var courses = [
    {
        id: 1,
        name: 'Ruby',
        coin: 250
    },
    {
        id: 2,
        name: 'PHP',
        coin: 0
    },
    {
        id: 3,
        name: 'Ruby',
        coin: 0
    },
    {
        id: 4,
        name: 'ReactJS',
        coin: 450
    }
]

var course = courses.filter(function (course,index) {
    return course.name === 'Ruby';
})

console.log(course);

* Trả về tất cả nếu phát hiện
----------------------------------------------------



----------------------------------------------------
map()

var courses = [
    {
        id: 1,
        name: 'Javascript',
        coin: 250
    },
    {
        id: 2,
        name: 'PHP',
        coin: 0
    },
    {
        id: 3,
        name: 'Ruby',
        coin: 0
    },
    {
        id: 4,
        name: 'ReactJS',
        coin: 450
    },
    {
        id: 5,
        name: 'Node',
        coin: 120
    },
    {
        id: 6,
        name: 'Html',
        coin: 0
    },
    {
        id: 7,
        name: 'Css',
        coin: 0
    }
]

var courseHandler = function(course, index, originArray) {
    return {
        id: course.id,
        name: `Khoá học: ${course.name}`,
        coin: course.coin,
        coinText: `Gia: ${course.coin}`,
        index: index,
        originArray: originArray
    };
}

var newCourse = courses.map(courseHandler);

console.log(newCourse);
----------------------------------------------------



----------------------------------------------------
reduce()

var courses = [
    {
        id: 1,
        name: 'Javascript',
        coin: 250
    },
    {
        id: 2,
        name: 'PHP',
        coin: 0
    },
    {
        id: 3,
        name: 'Ruby',
        coin: 0
    },
    {
        id: 4,
        name: 'ReactJS',
        coin: 450
    },
    {
        id: 5,
        name: 'Node',
        coin: 120
    },
    {
        id: 6,
        name: 'Html',
        coin: 0
    },
    {
        id: 7,
        name: 'Css',
        coin: 30
    }
]

//Biến lưu trữ
// Thực hiện lưu trữ

var i = 0;

function coinHandler(accumlator, currentValue, currentIndex, originArray) {
    i++;

    var total = accumlator + currentValue.coin

    console.table({
        'Lượt chạy: ': i,
        'Biến tích trữ: ': accumlator,
        'Giá khoá học: ': currentValue.coin,
        'Tích trữ được:' : total
    });

    console.log(currentValue);
    console.log(currentIndex);

    return total
}

var totalCoin = courses.reduce(coinHandler, 0);

* Rút gọn

var courses = [
    {
        id: 1,
        name: 'Javascript',
        coin: 250
    },
    {
        id: 2,
        name: 'PHP',
        coin: 0
    },
    {
        id: 3,
        name: 'Ruby',
        coin: 0
    },
    {
        id: 4,
        name: 'ReactJS',
        coin: 450
    },
    {
        id: 5,
        name: 'Node',
        coin: 120
    },
    {
        id: 6,
        name: 'Html',
        coin: 0
    },
    {
        id: 7,
        name: 'Css',
        coin: 30
    }
]

//Biến lưu trữ
// Thực hiện lưu trữ


function coinHandler(accumlator, currentValue, currentIndex, originArray) {
    return accumlator + currentValue.coin;
}

var totalCoin = courses.reduce(coinHandler, 0);

console.log(totalCoin);

* ví dụ ngắn hơn

var courses = [
    {
        id: 1,
        name: 'Javascript',
        coin: 250
    },
    {
        id: 2,
        name: 'PHP',
        coin: 0
    },
    {
        id: 3,
        name: 'Ruby',
        coin: 0
    },
    {
        id: 4,
        name: 'ReactJS',
        coin: 450
    },
    {
        id: 5,
        name: 'Node',
        coin: 120
    },
    {
        id: 6,
        name: 'Html',
        coin: 0
    },
    {
        id: 7,
        name: 'Css',
        coin: 30
    }
]

//Biến lưu trữ
// Thực hiện lưu trữ


var totalCoin = courses.reduce((a,b) => 
    a + b.coin,0
);

console.log(totalCoin);

----------------------------------------------------

* Các ví dụ khác về reduce

// Mảng phẳng (flat)

var depthArray = [1, 2, [3, 4], 5, 6, [7, 8, 9]];

var flatArray = depthArray.reduce(function(flatOutput, depthItem) {
    return flatOutput.concat(depthItem);
}, []);

console.log(flatArray);


---------------------------------------
* includes methods

console.log(Array.prototype.includes);

var title = 'Reponsive web design';

console.log(title.includes('web'));

// Giống như tiềm kiếm 1 chuỗi trong Mảng
// Có thể tìm kiếm từ 1 vị tí nào đó, nếu không truyền thì sẽ bắt đầu từ vị trí 0

console.log(title.includes('Reponsive', 2));

// tương tự trong array (khác nhau ở chỉ mục(array) và vị trí (chuỗi))