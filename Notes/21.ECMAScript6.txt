// Highlighted features
ECMAScript 6 - ECMAScript 2015 - ES6
    1. Let, const
    2. Template Literals
    3. Multi-line String
    4. Arrow function
    5. Classes
    6. Default parameter values
    7. Destructuring
    8. Rest parameters
    0. Spread
    10. Enhanced object literals
    11. Tagged template literals
    12. Modules
    13. Optional chaining (?.)

// Let & Const
1. Var / Let, Const: Scope, Hosting
2. Const / Var, Let: Assignment

* Code block: if else, loop, {}, ...
* Code thuần: Var
* Babel: Const, Let

// Template Literals: nên sử dụng Template string

// Multi-line String: nên sử dụng Template string

// Arrow function

example1:

const logger = (log) => {
    console.log(log);
}

logger('Message...');

example2:

const sum = (a, b) => a + b;

console.log(sum(2, 2))

// Classes

class Course {
    constructor(name, price) {
        this.name = name;
        this.price = price;
    }
}

const php = new Course('php', 1000);
const js = new Course('js', 1000);

console.log(php);
console.log(js);

// Default parameter values

example1:
function logger(log = "Gia tri mac dinh") {
    console.log(log);
}

logger();

example2
function logger(log, type = 'log') {
    console[type](log);
}

logger("message", 'warn');

// Enhanced object literals
1. Định nghĩa key: value cho object
2. Định nghĩa method cho object
3. Định nghĩa key cho object dưới dạng biến

example1:
var name = 'JavaScript'
var price = 1000

var course = {
    name,
    price,
    getName() {
        return name;
    }
}

console.log(course)

example2:
var fieldName = 'new-name'
var fieldPrice = 'price'

const course = {
    name: 'Javascript',
    [fieldName]: 'Javascript',
    [fieldPrice]: 1000
}

console.log(course)

// Destructuring, Rest
* array:

example1:
var array = ['js', 'php', 'ruby']

var [a, b, c] = array

console.log(a, b, c)

example2:

var array = ['js', 'php', 'ruby']

var [a, ...rest] = array

console.log(a)
console.log(rest)

* object

example1:
var course = {
    name: 'Javascript',
    price: 1000
}

var { name, price } = course

console.log(name, price)

example2:
var course = {
    name: 'Javascript',
    price: 1000
}

var { name, ...rest } = course

console.log(name)
console.log(rest)

** example:
function logger(...params) {
    console.log(params);
}

logger(1,2,3,4,5)


example:
function logger({ name, price, ...rest}) {
    console.log(name);
    console.log(price);
    console.log(rest);
}

logger({
    name: 'javascript',
    price: 1000,
    description: 'Description content'
})

*** Tương tự với mảng

// Spread (...) giống Rest nhưng cách sử dụng khác nhau - (giải) bỏ dấu [] của array và {} của object

* example1(array)
var array1 = ['Javascript', 'Ruby', 'PHP']

var array2 = ['ReactJS', 'Dart']

var array3 = [...array2,...array1]

console.log(array3)

* example2(object)
var object1 = {
    name: 'Javascript'
};

var object2 = {
    price: 1000
}

var object3 = {
    ...object1,...object2
}

console.log(object3)

* example3(object)
var defaultConfig = {
    api: 'http://domain-trang-khoa-hoc',
    apiVersion: 'v1',
    other: 'other'
}

var exerciseConfig = {
    ...defaultConfig,
    api: 'http://domain-trang-bai-tap'
}

console.log(exerciseConfig)

** example (truyền qua đối số - argument)

var array = ['javascript', 'PHP', 'Ruby']

function logger(...rest) {
    for (var i = 0; i < rest.length; i++) {
        console.log(rest[i])
    }
}

logger(...array)

// Tagged template literals

function highlight([first, ...strings], ...values) {
    return values.reduce(
        (acc, curr) => [...acc, `<span>${curr}</span>`, strings.shift()],
        [first]
    )
    .join('')
}

var brand = 'F8'
var course = 'Javascript'

const html = highlight`Học lập trình ${course} tại ${brand}!`;

console.log(html)

// Modules (Tự tìm hiểu thêm)

// Optional chaining (?.) (Tìm hiểu nhiều hơn mới hiểu)

const obj = {
    name: 'Alice',
    cat2: {
        name: 'Dinah1',
        cat2: {
            name: 'Dinah2',
            cat3: {
                name: 'Dinah3',
            }
        }
    }
}

if (
    obj?.cat?.cat2?.cat3
) {
    console.log(obj.cat.cat2.cat3.name)
}

* Ví dụ có 1 hàm, khi in ra mà mình không chắc chắn thì sử dụng ?.
* Khi sử dụng ?. : Nếu in hàm đó ra mà hàm đó không tồn tại thì devtool sẽ trống
* Khi không sử dụng ?. : Nếu in hàm đó ra mà hàm đó không tồn tại thì devtool sẽ báo lỗi