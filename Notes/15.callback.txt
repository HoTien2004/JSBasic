// Call back?

// Là hàm (function) được truyền qua đối số khi gọi hàm khác

// 1. Là hàm
// 2. Được truyền qua đối số
// 3. Được gọi lại trong hàm nhận đối số

function myFunction(parameter) {
  if (typeof parameter === 'function') {
  parameter("Học lập trình");
  }
}

function myCallback(value) {
  console.log('Value: ', value);
}

// myCallback(123)

myFunction(myCallback)


// Ví dụ với map ()

var courses = [
  'Javascript',
  'PHP',
  'CSS',
];

Array.prototype.map2 = function (callback) {
  var output = [];
  var arrayLength = this.length; // tối ưu hơn, vì không cần phải chạy lại trong vòng lặp

  for (var i = 0; i < arrayLength; i++) {
    var res = callback(this[i], i);
    output.push(res);
  }

  return output;
}

var htmls = courses.map2(function (course) {
    return `<h2>${course}</h2>`
})


console.log(htmls.join(' '));

// courses.map2(function (course, index) {
//   console.log(index, course);
// });

------------------------------------------------------------------

Array.prototype.myMap = function(cb) {
  var output = [];
  var arrayLength = this.length;

  for (var i = 0; i < arrayLength; i++) {
      var res = cb(this[i], i);
      output.push(res)
  }

  return output;
}

// Expected results
const numbers = [1, 2, 3];

console.log(numbers.myMap(function (number) {
    return number * 2;
})) // Output: [2, 4, 6]

console.log(numbers.myMap(function (number, index) {
    return number * index;
})) // Output: [0, 2, 6]

----------------------------------------------------------

// Callback trong forEach
// Cần ôn lại 
//   1. Object prototype
//   2. For in
//   3. hasOwnProperty

Array.prototype.forEach2 = function(cb) {
  for (var index in this) {
      if (this.hasOwnProperty(index)) {
        cb(this[index], index, this);
      }
  }
}

// var courses = new Array(100);

var courses = [
  'Javascript',
  'PHP',
  'Ruby'
];

courses.forEach2(function(courses, index, array) {
  console.log(courses, index, array);
});

--------------------------------------------------------------------

// Callback trong filter
// Kết quả nhận được trong filter là 1 mảng mới

var courses = [
  {
    name: 'Javascript',
    coin: 600
  },
  {
    name: 'PHP',
    coin: 860
  },
  {
    name: 'Ruby',
    coin: 980
  }
];


Array.prototype.filter2 = function(callback) {
  var output = [];
    for (var index in this) {
        if (this.hasOwnProperty(index)) {
          var result = callback(this[index], index, this);
          if (result) {
              output.push(this[index]);
          }
        }
    }
    return output;
}

var filterCourses = courses.filter2(function(course, index, array) {
    console.log(course, index, array);
    // return course.coin > 700;
});

console.log(filterCourses);

// Không lặp qua array trống


-------------------------------------------

// Callback trong some
// Trả về tối thiểu 1 phần tử thoả mãn trong mảng (true/false)

var courses = [
    {
      name: 'Javascript',
      coin: 600,
      isFinish: true
    },
    {
      name: 'PHP',
      coin: 860,
      isFinish: false
    },
    {
      name: 'Ruby',
      coin: 980,
      isFinish: false
    }
];

Array.prototype.some2 = function(callback) {
    for (var index in this) {
        if (this.hasOwnProperty(index)) {
            if (callback(this[index], index, this)) {
                return true;
            };
        }   
    }
    return false;
}

var result = courses.some2(function(course, index, array) {
    return course.isFinish;
})

console.log(result)

------------------------------------------------------------------

// Callback trong every
// Trả về tối tất cả phần tử thoả mãn điều kiện trong mảng (true/false)