// JSON

1. Là một định dạng dữ liệu (chuỗi)
2. JavaScript Object Notation (JSON)
3. JSON (Các thể hiện)
Number: var a = '1'
String: var a = '"abc"'
Boolean: var a = 'true'
Null: var a = 'null'
Array: var a = '["Javascript", "JSON"]'
Object: var a = '{"name": "Tien", "age": "18"}'

console.log(typeof JSON.parse(a))

* Mã hoá(Encode) / Giải mã(Decode) - Thao tác
* Stringify: Từ Javascript type -> JSON
* Parse: Từ JSON -> Javascript type

// Promise (sync, async)

setTimeout(function() {
    console.log(1);
}, 10000);

console.log(2);

* Callback hell
* Pyramid of doom

setTimeout(function() {
    console.log(1)
    setTimeout(function() {
        console.log(2)
        setTimeout(function() {
            console.log(3)
            setTimeout(function() {
                console.log(4)
            }, 1000)
        }, 1000)
    }, 1000)
}, 1000)

* Promise (concept)

- Các bước tạo ra 1 promise
1. new promise
2. Executor
- Các trạng thái của promise
1. Pending
2. Fulfilled (khi resolve() được gọi)
3. Rejected (khi ejected() được gọi - đã tạch)

** Khái niệm promise là gì ?
=> promise là 1 khái niệm sinh ra để giúp chúng ta có thể xử lí các thao tác
bất đồng bộ, trước khi có promise thì chúng ra thường sử dụng callback và
callback thường xảy ra vấn đề callback hell nó sẽ bị sâu vào rất khó nhìn, rối rắm
-> promise được sinh ra (phiên bản ES6) để chúng ta sử dụng khắc phục tình trạng 
callback hell để giúp chúng ta viết code không bị sâu vào, đọc dễ hiểu hơn.
(Có thể nói thêm về các tạo 1 promise, các trạng thái, các phương thức then, catch có thể finally)

* Promise (chain)

vd1:

var promise = new Promise(
    // Executor
    function(resolve, reject) {
        // Logic
        // resolve : thành công
        // reject : thất bại

        // Fake call API
        resolve()
    }
);

promise
    .then(function() {
        return 1;
    })
    .then(function(data) {
        console.log(data);
        return 2;
    })
    .then(function(data) {
        console.log(data);
        return 3;
    })
    .then(function(data) {
        console.log(data);
    })
    .catch(function() {
        console.log('Failure');
    })
    .finally(function() {
        console.log('Done!');
    })

    vd2:

    var promise = new Promise(
    // Executor
    function(resolve, reject) {
        // Logic
        // resolve : thành công
        // reject : thất bại

        // Fake call API
        resolve()
    }
);

promise
    .then(function() {
        return new Promise(function(resolve, reject) {
            setTimeout(resolve, 3000);
        })
    })
    .then(function(data) { // then này thuộc promise phía trên (không phải promise đầu)
        console.log(data);
        return 2;
    })
    .then(function(data) {
        console.log(data);
        return 3;
    })
    .then(function(data) {
        console.log(data);
    })
    .catch(function() {
        console.log('Failure');
    })
    .finally(function() {
        console.log('Done!');
    })

vd3: (giải quyết vấn đề callback hell bằng promise)

function sleep(ms) {
    return new Promise(function (resolve) {
        setTimeout(resolve, ms);
    });
}

sleep(1000)
    .then(function () {
        console.log(1)
        return sleep(1000);
    })
    .then(function () {
        console.log(2)
        return sleep(1000);
    })
    .then(function () {
        console.log(3)
        return sleep(1000);
    });

* Promise methods (resolve, reject, all)

example1:

function sleep(ms) {
    return new Promise(function (resolve) {
        setTimeout(resolve, ms);
    });
}

sleep(1000)
    .then(function () {
        console.log(1)
        return sleep(1000);
    })
    .then(function () {
        console.log(2)
        return new Promise(function (resolve, rejected) {
            rejected('Co loi!');
        })
    })
    .then(function () {
        console.log(3)
        return sleep(1000);
    })
    .then(function () {
        console.log(4)
        return sleep(1000);
    })
    .catch(function (err) {
        console.log(err);
    })

1.Promise.resolve
2.Promise.reject
3.Promise.all

example2:

var promise = Promise.resolve('Success');
// var promise = Promise.reject('Error');

promise
    .then(function(result) {
        console.log('result: ', result)
    })
    .catch(function(err) {
        console.log('result: ', err)
    })

example3:

var promise1 = new Promise(function(resolve) {
    setTimeout(function() {
        resolve([1]);
    }, 2000)
})

var promise2 = new Promise(function(resolve) {
    setTimeout(function() {
        resolve([2, 3]);
    }, 5000)
})

Promise.all([promise1, promise2])
    .then(function(result) {
        var result1 = result[0]
        var result2 = result[1]

        console.log(result1.concat(result2))
    });

example4(ES6):

var promise1 = new Promise(function(resolve) {
    setTimeout(function() {
        resolve([1]);
    }, 2000)
})

var promise2 = new Promise(function(resolve) {
    setTimeout(function() {
        resolve([2, 3]);
    }, 5000)
})

Promise.all([promise1, promise2])
    .then(function([result1, result2]) {
        console.log(result1.concat(result2))
    });
** Nếu có 1 promise nào lỗi thì Promise.all sẽ hỏng hết.

// Promise example

html
[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <ul id="comment-block"></ul>
</body>
    <script src="./main.js"></script>
</html>]

js
[var users = [
    {
        id: 1,
        name: 'Messi',
    },
    {
        id: 2,
        name: 'Tien Ho'
    },
    {
        id: 3,
        name: 'Ronaldo'
    },
    {
        id: 4,
        name: 'TienThu2'
    },
    {
        id: 5,
        name: 'TienThu3'
    },
];

var comments = [
    {
        id: 1,
        user_id: 2,
        content: 'Ronaldo pro better than Messi'
    },
    {
        id: 2,
        user_id: 1,
        content: 'No, Messi is GOAT'
    },
    {
        id: 3,
        user_id: 3,
        content: 'No, Tien Ho is GOAT'
    },
]

// 1. Lấy comments
// 2. Từ comments lấy ra user_id, từ user_id lấu ra user tương ứng

// Fake API
// 1. Array
// 2. Function, callback
// 3. Promise
// 4. DOM

function getComments() {
    return new Promise(function(resolve) {
        setTimeout(function() {
            resolve(comments)
        }, 1000)
    })
}

function getUserByIds(userIds) {
    return new Promise(function(resolve) {
        var result = users.filter(function(user) {
            return userIds.includes(user.id)
        })
        setTimeout(function() {
            resolve(result);
        }, 1000)  
    }) 
}

getComments()
    .then(function(comments) {
        var userIds = comments.map(function(comment) {
            return comment.user_id;
        })
        
        return getUserByIds(userIds)
            .then(function(users) {
                return {
                    users: users,
                    comments: comments,
                }
        })
    })
    .then(function(data) {
        var commentBlock = document.getElementById('comment-block')

        var html = ''

        data.comments.forEach(function(comment) {
            var user = data.users.find(function(user) {
                return user.id === comment.user_id
            })
            html += `<li>${user.name}: ${comment.content}</li>`
        })

        commentBlock.innerHTML = html;
    })

]

// Fetch

1. Front-end: Xây dựng giao diện người dùng
2. Back-end: Xây dựng logic xử lý và cơ sở dữ liệu

* API (URL) -> Application programing interface (Cổng giao tiếp giữa các phần mềm)
* Backend -> API (URL) -> Fetch -> JSON/XML
-> JSON.parse -> Javascript types
-> Render ra giao diện với HTML

html
[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <ul id="post-block"></ul>
</body>
    <script src="./main.js"></script>
</html>]

js
[var postApi = 'https://jsonplaceholder.typicode.com/posts'

fetch(postApi)
    .then(function(response) {
        return response.json()
    })
    .then(function(posts) {
        var htmls = posts.map(function(post) {
            return `<li>
                <h2>${post.title}</h2>
                <p>${post.body}</p>
            </li>`
        });

        var html = htmls.join(' ');
        document.getElementById('post-block').innerHTML = html;
    })
    .catch(function(err) {
        console.error('Có lỗi')
    })]

* JSON server (Thư viện): API server (Fake) / Mock API
* CRUD:
    - Create: Tạo mới -> POST
    - Read: Lấy dữ liệu -> GET
    - Update: Chỉnh sửa -> PUT / PATCH
    - Delete: Xoá -> DELETE
* Postman (Sử dụng Postman làm việc với REST API)
    - Sự khác nhau giữa PUT và PATCH:
        + Khi sử dụng phương thức PUT, phải gửi toàn bộ dữ liệu mới lên máy chủ, kể cả những dữ liệu không muốn thay đổi.
        + Khi sử dụng phương thức PATCH, chỉ cần gửi trường dữ liệu muốn thay đổi, dữ liệu cũ không thay đổi sẽ được giữ nguyên.
        + Tóm lại PUT thường dùng để thay thế toàn bộ dữ liệu còn PATCH chỉ để thay thế 1 trường dữ liệu cụ thể nào đó.
** Rest API ?

///// Thêm/sửa/xóa khóa học với Fetch và REST API (Tất cả dữ liệu chỉ tham khảo
      không đầy đủ, chú ý vào thư mục json-sever)

html
[<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <div>
        <h2>Danh sách khoá học</h2>

        <ul id="list-courses">
            <li></li>
        </ul>
    </div>

    <div>
        <div>
            <label>Name</label>
            <input type="text" name="name">
        </div>
        <div>
            <label>Description</label>
            <input type="text" name="description">
        </div>
        <div>
            <button id="create">Create</button>
        </div>
    </div>

</body>
    <script src="./main.js"></script>
</html>]

js
[var courseAPI = 'http://localhost:3000/courses'

function start() {
    getCourses(renderCourses);

    handleCreateForm();
}

start();

// Functions
function getCourses(callback) {
    fetch(courseAPI)
        .then(function(response) {
            return response.json();
        })
        .then(callback);
}

function createCourse(data, callback) {
    var options = {
        method: 'POST',
        body: JSON.stringify(data),
        headers: {
            "Content-Type": "application/json"
        }
    }
    fetch(courseAPI, options)
        .then(function(response) {
            response.json();
        })
        .then(callback);
}

function handleDeleteCourse(id) {
    var options = {
        method: 'DELETE',
        headers: {
            "Content-Type": "application/json"
        }
    };
    fetch(courseAPI + '/' + id, options)
        .then(function(response) {
            return response.json();
        })
        .then(function() {
            var courseItem = document.querySelector('.course-item-' + id)
            if (courseItem) {
                courseItem.remove();
            }
        });
}

function handleUpdateCourse(id) {
    fetch(courseAPI + '/' + id)
        .then(function(response) {
            return response.json();
        })
        .then(function(course) {
            document.querySelector('input[name="name"]').value = course.name;
            document.querySelector('input[name="description"]').value = course.description;

            var createBtn = document.querySelector('#create');
            createBtn.innerText = 'Lưu'

            createBtn.onclick = function() {
                var updatedData = {
                    name: document.querySelector('input[name="name"]').value,
                    description: document.querySelector('input[name="description"]').value
                };

                var options = {
                    method: 'PUT',
                    body: JSON.stringify(updatedData),
                    headers: {
                        "Content-Type": "application/json"
                    }
                };
                fetch(courseAPI + '/' + id, options)
                    .then(function(response) {
                        return response.json();
                    })
                    .then(function() {
                        getCourses(renderCourses);
                    });
            }
        });
}

function renderCourses(courses) {
    var listCourseBlock =
        document.querySelector('#list-courses')
        var htmls = courses.map(function(course) {
            return `
                <li class="course-item-${course.id}">
                    <h4>${course.name}</h4>
                    <p>${course.description}</p>
                    <button onclick="handleDeleteCourse(${course.id})">Xoá</button>
                    <button onclick="handleUpdateCourse(${course.id})">Chỉnh Sửa</button>
                </li>
            `;
        })
        listCourseBlock.innerHTML = htmls.join('')
}

function handleCreateForm() {
    var createBtn = document.querySelector('#create');

    createBtn.onclick = function() {
        var name = document.querySelector('input[name="name"]').value;
        var description = document.querySelector('input[name="description"]').value;
        
        var formData = {
            name: name,
            description: description
        }

        createCourse(formData,function() {
            getCourses(renderCourses);
        });
    }
}]