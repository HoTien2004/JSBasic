// JSON

1. Là một định dạng dữ liệu (chuỗi)
2. JavaScript Object Notation (JSON)
3. JSON (Các thể hiện)
Number: var a = '1'
String: var a = '"abc"'
Boolean: var a = 'true'
Null: var a = 'null'
Array: var a = '["Javascript", "JSON"]'
Object: var a = '{"name": "Tien", "age": "18"}'

console.log(typeof JSON.parse(a))

* Mã hoá(Encode) / Giải mã(Decode) - Thao tác
* Stringify: Từ Javascript type -> JSON
* Parse: Từ JSON -> Javascript type

// Promise (sync, async)

setTimeout(function() {
    console.log(1);
}, 10000);

console.log(2);

* Callback hell
* Pyramid of doom

setTimeout(function() {
    console.log(1)
    setTimeout(function() {
        console.log(2)
        setTimeout(function() {
            console.log(3)
            setTimeout(function() {
                console.log(4)
            }, 1000)
        }, 1000)
    }, 1000)
}, 1000)

* Promise (concept)

- Các bước tạo ra 1 promise
1. new promise
2. Executor
- Các trạng thái của promise
1. Pending
2. Fulfilled (khi resolve() được gọi)
3. Rejected (khi ejected() được gọi - đã tạch)

** Khái niệm promise là gì ?
=> promise là 1 khái niệm sinh ra để giúp chúng ta có thể xử lí các thao tác
bất đồng bộ, trước khi có promise thì chúng ra thường sử dụng callback và
callback thường xảy ra vấn đề callback hell nó sẽ bị sâu vào rất khó nhìn, rối rắm
-> promise được sinh ra (phiên bản ES6) để chúng ta sử dụng khắc phục tình trạng 
callback hell để giúp chúng ta viết code không bị sâu vào, đọc dễ hiểu hơn.
(Có thể nói thêm về các tạo 1 promise, các trạng thái, các phương thức then, catch có thể finally)

* Promise (chain)

vd1:

var promise = new Promise(
    // Executor
    function(resolve, reject) {
        // Logic
        // resolve : thành công
        // reject : thất bại

        // Fake call API
        resolve()
    }
);

promise
    .then(function() {
        return 1;
    })
    .then(function(data) {
        console.log(data);
        return 2;
    })
    .then(function(data) {
        console.log(data);
        return 3;
    })
    .then(function(data) {
        console.log(data);
    })
    .catch(function() {
        console.log('Failure');
    })
    .finally(function() {
        console.log('Done!');
    })

    vd2:

    var promise = new Promise(
    // Executor
    function(resolve, reject) {
        // Logic
        // resolve : thành công
        // reject : thất bại

        // Fake call API
        resolve()
    }
);

promise
    .then(function() {
        return new Promise(function(resolve, reject) {
            setTimeout(resolve, 3000);
        })
    })
    .then(function(data) { // then này thuộc promise phía trên (không phải promise đầu)
        console.log(data);
        return 2;
    })
    .then(function(data) {
        console.log(data);
        return 3;
    })
    .then(function(data) {
        console.log(data);
    })
    .catch(function() {
        console.log('Failure');
    })
    .finally(function() {
        console.log('Done!');
    })

vd3: (giải quyết vấn đề callback hell bằng promise)

function sleep(ms) {
    return new Promise(function (resolve) {
        setTimeout(resolve, ms);
    });
}

sleep(1000)
    .then(function () {
        console.log(1)
        return sleep(1000);
    })
    .then(function () {
        console.log(2)
        return sleep(1000);
    })
    .then(function () {
        console.log(3)
        return sleep(1000);
    });

* Promise methods (resolve, reject, all)

example1:

function sleep(ms) {
    return new Promise(function (resolve) {
        setTimeout(resolve, ms);
    });
}

sleep(1000)
    .then(function () {
        console.log(1)
        return sleep(1000);
    })
    .then(function () {
        console.log(2)
        return new Promise(function (resolve, rejected) {
            rejected('Co loi!');
        })
    })
    .then(function () {
        console.log(3)
        return sleep(1000);
    })
    .then(function () {
        console.log(4)
        return sleep(1000);
    })
    .catch(function (err) {
        console.log(err);
    })

1.Promise.resolve
2.Promise.reject
3.Promise.all

example2:

var promise = Promise.resolve('Success');
// var promise = Promise.reject('Error');

promise
    .then(function(result) {
        console.log('result: ', result)
    })
    .catch(function(err) {
        console.log('result: ', err)
    })

example3:

var promise1 = new Promise(function(resolve) {
    setTimeout(function() {
        resolve([1]);
    }, 2000)
})

var promise2 = new Promise(function(resolve) {
    setTimeout(function() {
        resolve([2, 3]);
    }, 5000)
})

Promise.all([promise1, promise2])
    .then(function(result) {
        var result1 = result[0]
        var result2 = result[1]

        console.log(result1.concat(result2))
    });

example4(ES6):

var promise1 = new Promise(function(resolve) {
    setTimeout(function() {
        resolve([1]);
    }, 2000)
})

var promise2 = new Promise(function(resolve) {
    setTimeout(function() {
        resolve([2, 3]);
    }, 5000)
})

Promise.all([promise1, promise2])
    .then(function([result1, result2]) {
        console.log(result1.concat(result2))
    });
** Nếu có 1 promise nào lỗi thì Promise.all sẽ hỏng hết.